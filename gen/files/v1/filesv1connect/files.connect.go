// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: files/v1/files.proto

package filesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cmp0st/byte/gen/files/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "files.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceListDirectoryProcedure is the fully-qualified name of the FileService's ListDirectory
	// RPC.
	FileServiceListDirectoryProcedure = "/files.v1.FileService/ListDirectory"
	// FileServiceMakeDirectoryProcedure is the fully-qualified name of the FileService's MakeDirectory
	// RPC.
	FileServiceMakeDirectoryProcedure = "/files.v1.FileService/MakeDirectory"
	// FileServiceRemoveDirectoryProcedure is the fully-qualified name of the FileService's
	// RemoveDirectory RPC.
	FileServiceRemoveDirectoryProcedure = "/files.v1.FileService/RemoveDirectory"
	// FileServiceReadFileProcedure is the fully-qualified name of the FileService's ReadFile RPC.
	FileServiceReadFileProcedure = "/files.v1.FileService/ReadFile"
	// FileServiceWriteFileProcedure is the fully-qualified name of the FileService's WriteFile RPC.
	FileServiceWriteFileProcedure = "/files.v1.FileService/WriteFile"
	// FileServiceDeleteFileProcedure is the fully-qualified name of the FileService's DeleteFile RPC.
	FileServiceDeleteFileProcedure = "/files.v1.FileService/DeleteFile"
)

// FileServiceClient is a client for the files.v1.FileService service.
type FileServiceClient interface {
	// List directory contents
	ListDirectory(context.Context, *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error)
	// Create a directory
	MakeDirectory(context.Context, *connect.Request[v1.MakeDirectoryRequest]) (*connect.Response[v1.MakeDirectoryResponse], error)
	// Delete a directory
	RemoveDirectory(context.Context, *connect.Request[v1.RemoveDirectoryRequest]) (*connect.Response[v1.RemoveDirectoryResponse], error)
	// Read file contents
	ReadFile(context.Context, *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error)
	// Write file contents
	WriteFile(context.Context, *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error)
	// Delete a file or directory
	DeleteFile(context.Context, *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error)
}

// NewFileServiceClient constructs a client for the files.v1.FileService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := v1.File_files_v1_files_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		listDirectory: connect.NewClient[v1.ListDirectoryRequest, v1.ListDirectoryResponse](
			httpClient,
			baseURL+FileServiceListDirectoryProcedure,
			connect.WithSchema(fileServiceMethods.ByName("ListDirectory")),
			connect.WithClientOptions(opts...),
		),
		makeDirectory: connect.NewClient[v1.MakeDirectoryRequest, v1.MakeDirectoryResponse](
			httpClient,
			baseURL+FileServiceMakeDirectoryProcedure,
			connect.WithSchema(fileServiceMethods.ByName("MakeDirectory")),
			connect.WithClientOptions(opts...),
		),
		removeDirectory: connect.NewClient[v1.RemoveDirectoryRequest, v1.RemoveDirectoryResponse](
			httpClient,
			baseURL+FileServiceRemoveDirectoryProcedure,
			connect.WithSchema(fileServiceMethods.ByName("RemoveDirectory")),
			connect.WithClientOptions(opts...),
		),
		readFile: connect.NewClient[v1.ReadFileRequest, v1.ReadFileResponse](
			httpClient,
			baseURL+FileServiceReadFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("ReadFile")),
			connect.WithClientOptions(opts...),
		),
		writeFile: connect.NewClient[v1.WriteFileRequest, v1.WriteFileResponse](
			httpClient,
			baseURL+FileServiceWriteFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("WriteFile")),
			connect.WithClientOptions(opts...),
		),
		deleteFile: connect.NewClient[v1.DeleteFileRequest, v1.DeleteFileResponse](
			httpClient,
			baseURL+FileServiceDeleteFileProcedure,
			connect.WithSchema(fileServiceMethods.ByName("DeleteFile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	listDirectory   *connect.Client[v1.ListDirectoryRequest, v1.ListDirectoryResponse]
	makeDirectory   *connect.Client[v1.MakeDirectoryRequest, v1.MakeDirectoryResponse]
	removeDirectory *connect.Client[v1.RemoveDirectoryRequest, v1.RemoveDirectoryResponse]
	readFile        *connect.Client[v1.ReadFileRequest, v1.ReadFileResponse]
	writeFile       *connect.Client[v1.WriteFileRequest, v1.WriteFileResponse]
	deleteFile      *connect.Client[v1.DeleteFileRequest, v1.DeleteFileResponse]
}

// ListDirectory calls files.v1.FileService.ListDirectory.
func (c *fileServiceClient) ListDirectory(ctx context.Context, req *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error) {
	return c.listDirectory.CallUnary(ctx, req)
}

// MakeDirectory calls files.v1.FileService.MakeDirectory.
func (c *fileServiceClient) MakeDirectory(ctx context.Context, req *connect.Request[v1.MakeDirectoryRequest]) (*connect.Response[v1.MakeDirectoryResponse], error) {
	return c.makeDirectory.CallUnary(ctx, req)
}

// RemoveDirectory calls files.v1.FileService.RemoveDirectory.
func (c *fileServiceClient) RemoveDirectory(ctx context.Context, req *connect.Request[v1.RemoveDirectoryRequest]) (*connect.Response[v1.RemoveDirectoryResponse], error) {
	return c.removeDirectory.CallUnary(ctx, req)
}

// ReadFile calls files.v1.FileService.ReadFile.
func (c *fileServiceClient) ReadFile(ctx context.Context, req *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error) {
	return c.readFile.CallUnary(ctx, req)
}

// WriteFile calls files.v1.FileService.WriteFile.
func (c *fileServiceClient) WriteFile(ctx context.Context, req *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error) {
	return c.writeFile.CallUnary(ctx, req)
}

// DeleteFile calls files.v1.FileService.DeleteFile.
func (c *fileServiceClient) DeleteFile(ctx context.Context, req *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error) {
	return c.deleteFile.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the files.v1.FileService service.
type FileServiceHandler interface {
	// List directory contents
	ListDirectory(context.Context, *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error)
	// Create a directory
	MakeDirectory(context.Context, *connect.Request[v1.MakeDirectoryRequest]) (*connect.Response[v1.MakeDirectoryResponse], error)
	// Delete a directory
	RemoveDirectory(context.Context, *connect.Request[v1.RemoveDirectoryRequest]) (*connect.Response[v1.RemoveDirectoryResponse], error)
	// Read file contents
	ReadFile(context.Context, *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error)
	// Write file contents
	WriteFile(context.Context, *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error)
	// Delete a file or directory
	DeleteFile(context.Context, *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := v1.File_files_v1_files_proto.Services().ByName("FileService").Methods()
	fileServiceListDirectoryHandler := connect.NewUnaryHandler(
		FileServiceListDirectoryProcedure,
		svc.ListDirectory,
		connect.WithSchema(fileServiceMethods.ByName("ListDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceMakeDirectoryHandler := connect.NewUnaryHandler(
		FileServiceMakeDirectoryProcedure,
		svc.MakeDirectory,
		connect.WithSchema(fileServiceMethods.ByName("MakeDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceRemoveDirectoryHandler := connect.NewUnaryHandler(
		FileServiceRemoveDirectoryProcedure,
		svc.RemoveDirectory,
		connect.WithSchema(fileServiceMethods.ByName("RemoveDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceReadFileHandler := connect.NewUnaryHandler(
		FileServiceReadFileProcedure,
		svc.ReadFile,
		connect.WithSchema(fileServiceMethods.ByName("ReadFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceWriteFileHandler := connect.NewUnaryHandler(
		FileServiceWriteFileProcedure,
		svc.WriteFile,
		connect.WithSchema(fileServiceMethods.ByName("WriteFile")),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceDeleteFileHandler := connect.NewUnaryHandler(
		FileServiceDeleteFileProcedure,
		svc.DeleteFile,
		connect.WithSchema(fileServiceMethods.ByName("DeleteFile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/files.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceListDirectoryProcedure:
			fileServiceListDirectoryHandler.ServeHTTP(w, r)
		case FileServiceMakeDirectoryProcedure:
			fileServiceMakeDirectoryHandler.ServeHTTP(w, r)
		case FileServiceRemoveDirectoryProcedure:
			fileServiceRemoveDirectoryHandler.ServeHTTP(w, r)
		case FileServiceReadFileProcedure:
			fileServiceReadFileHandler.ServeHTTP(w, r)
		case FileServiceWriteFileProcedure:
			fileServiceWriteFileHandler.ServeHTTP(w, r)
		case FileServiceDeleteFileProcedure:
			fileServiceDeleteFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) ListDirectory(context.Context, *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.ListDirectory is not implemented"))
}

func (UnimplementedFileServiceHandler) MakeDirectory(context.Context, *connect.Request[v1.MakeDirectoryRequest]) (*connect.Response[v1.MakeDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.MakeDirectory is not implemented"))
}

func (UnimplementedFileServiceHandler) RemoveDirectory(context.Context, *connect.Request[v1.RemoveDirectoryRequest]) (*connect.Response[v1.RemoveDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.RemoveDirectory is not implemented"))
}

func (UnimplementedFileServiceHandler) ReadFile(context.Context, *connect.Request[v1.ReadFileRequest]) (*connect.Response[v1.ReadFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.ReadFile is not implemented"))
}

func (UnimplementedFileServiceHandler) WriteFile(context.Context, *connect.Request[v1.WriteFileRequest]) (*connect.Response[v1.WriteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.WriteFile is not implemented"))
}

func (UnimplementedFileServiceHandler) DeleteFile(context.Context, *connect.Request[v1.DeleteFileRequest]) (*connect.Response[v1.DeleteFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.DeleteFile is not implemented"))
}
