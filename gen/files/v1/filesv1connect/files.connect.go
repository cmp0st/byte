// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: files/v1/files.proto

package filesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cmp0st/byte/gen/files/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "files.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceListDirectoryProcedure is the fully-qualified name of the FileService's ListDirectory
	// RPC.
	FileServiceListDirectoryProcedure = "/files.v1.FileService/ListDirectory"
)

// FileServiceClient is a client for the files.v1.FileService service.
type FileServiceClient interface {
	// List directory contents
	ListDirectory(context.Context, *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error)
}

// NewFileServiceClient constructs a client for the files.v1.FileService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	fileServiceMethods := v1.File_files_v1_files_proto.Services().ByName("FileService").Methods()
	return &fileServiceClient{
		listDirectory: connect.NewClient[v1.ListDirectoryRequest, v1.ListDirectoryResponse](
			httpClient,
			baseURL+FileServiceListDirectoryProcedure,
			connect.WithSchema(fileServiceMethods.ByName("ListDirectory")),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	listDirectory *connect.Client[v1.ListDirectoryRequest, v1.ListDirectoryResponse]
}

// ListDirectory calls files.v1.FileService.ListDirectory.
func (c *fileServiceClient) ListDirectory(ctx context.Context, req *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error) {
	return c.listDirectory.CallUnary(ctx, req)
}

// FileServiceHandler is an implementation of the files.v1.FileService service.
type FileServiceHandler interface {
	// List directory contents
	ListDirectory(context.Context, *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error)
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceMethods := v1.File_files_v1_files_proto.Services().ByName("FileService").Methods()
	fileServiceListDirectoryHandler := connect.NewUnaryHandler(
		FileServiceListDirectoryProcedure,
		svc.ListDirectory,
		connect.WithSchema(fileServiceMethods.ByName("ListDirectory")),
		connect.WithHandlerOptions(opts...),
	)
	return "/files.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceListDirectoryProcedure:
			fileServiceListDirectoryHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) ListDirectory(context.Context, *connect.Request[v1.ListDirectoryRequest]) (*connect.Response[v1.ListDirectoryResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("files.v1.FileService.ListDirectory is not implemented"))
}
