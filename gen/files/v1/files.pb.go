// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: files/v1/files.proto

package filesv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// File information
type FileInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File or directory name (basename)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Full path to the file or directory
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// Size of the file in bytes (0 for directories)
	Size int64 `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	// File mode/permissions as Unix mode bits
	Mode uint32 `protobuf:"varint,4,opt,name=mode,proto3" json:"mode,omitempty"`
	// Last modification time
	ModifiedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=modified_time,json=modifiedTime,proto3" json:"modified_time,omitempty"`
	// Whether this is a directory
	IsDir         bool `protobuf:"varint,6,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	mi := &file_files_v1_files_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetModifiedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ModifiedTime
	}
	return nil
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

// Directory entry for listings
type DirectoryEntry struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File information for this entry
	FileInfo      *FileInfo `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DirectoryEntry) Reset() {
	*x = DirectoryEntry{}
	mi := &file_files_v1_files_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DirectoryEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DirectoryEntry) ProtoMessage() {}

func (x *DirectoryEntry) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DirectoryEntry.ProtoReflect.Descriptor instead.
func (*DirectoryEntry) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{1}
}

func (x *DirectoryEntry) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

// Streaming chunk for file content
type StreamChunk struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Chunk of file data
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// Byte offset of this chunk in the file
	Offset        int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamChunk) Reset() {
	*x = StreamChunk{}
	mi := &file_files_v1_files_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamChunk) ProtoMessage() {}

func (x *StreamChunk) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamChunk.ProtoReflect.Descriptor instead.
func (*StreamChunk) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{2}
}

func (x *StreamChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

// List directory request
type ListDirectoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the directory to list
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDirectoryRequest) Reset() {
	*x = ListDirectoryRequest{}
	mi := &file_files_v1_files_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryRequest) ProtoMessage() {}

func (x *ListDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryRequest.ProtoReflect.Descriptor instead.
func (*ListDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{3}
}

func (x *ListDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// List directory response
type ListDirectoryResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Directory entries
	Entries       []*DirectoryEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDirectoryResponse) Reset() {
	*x = ListDirectoryResponse{}
	mi := &file_files_v1_files_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDirectoryResponse) ProtoMessage() {}

func (x *ListDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDirectoryResponse.ProtoReflect.Descriptor instead.
func (*ListDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{4}
}

func (x *ListDirectoryResponse) GetEntries() []*DirectoryEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// Read file request
type ReadFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to the file to read
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Byte offset to start reading from
	Offset *int64 `protobuf:"varint,2,opt,name=offset,proto3,oneof" json:"offset,omitempty"`
	// Maximum number of bytes to read
	Limit         *int64 `protobuf:"varint,3,opt,name=limit,proto3,oneof" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileRequest) Reset() {
	*x = ReadFileRequest{}
	mi := &file_files_v1_files_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileRequest) ProtoMessage() {}

func (x *ReadFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileRequest.ProtoReflect.Descriptor instead.
func (*ReadFileRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{5}
}

func (x *ReadFileRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ReadFileRequest) GetOffset() int64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *ReadFileRequest) GetLimit() int64 {
	if x != nil && x.Limit != nil {
		return *x.Limit
	}
	return 0
}

// Read file response (streamed)
type ReadFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File data chunk
	Chunk         *StreamChunk `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReadFileResponse) Reset() {
	*x = ReadFileResponse{}
	mi := &file_files_v1_files_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReadFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadFileResponse) ProtoMessage() {}

func (x *ReadFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadFileResponse.ProtoReflect.Descriptor instead.
func (*ReadFileResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{6}
}

func (x *ReadFileResponse) GetChunk() *StreamChunk {
	if x != nil {
		return x.Chunk
	}
	return nil
}

// Write file request (streamed)
type WriteFileRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Either metadata (first message) or chunk data
	//
	// Types that are valid to be assigned to Data:
	//
	//	*WriteFileRequest_Metadata
	//	*WriteFileRequest_Chunk
	Data          isWriteFileRequest_Data `protobuf_oneof:"data"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteFileRequest) Reset() {
	*x = WriteFileRequest{}
	mi := &file_files_v1_files_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileRequest) ProtoMessage() {}

func (x *WriteFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileRequest.ProtoReflect.Descriptor instead.
func (*WriteFileRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{7}
}

func (x *WriteFileRequest) GetData() isWriteFileRequest_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *WriteFileRequest) GetMetadata() *WriteFileMetadata {
	if x != nil {
		if x, ok := x.Data.(*WriteFileRequest_Metadata); ok {
			return x.Metadata
		}
	}
	return nil
}

func (x *WriteFileRequest) GetChunk() *StreamChunk {
	if x != nil {
		if x, ok := x.Data.(*WriteFileRequest_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

type isWriteFileRequest_Data interface {
	isWriteFileRequest_Data()
}

type WriteFileRequest_Metadata struct {
	// File metadata for the write operation
	Metadata *WriteFileMetadata `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type WriteFileRequest_Chunk struct {
	// File data chunk
	Chunk *StreamChunk `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*WriteFileRequest_Metadata) isWriteFileRequest_Data() {}

func (*WriteFileRequest_Chunk) isWriteFileRequest_Data() {}

// Write file metadata (first message in stream)
type WriteFileMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path where the file should be written
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// File mode/permissions as Unix mode bits
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Whether to create parent directories if they don't exist
	CreateParents bool `protobuf:"varint,3,opt,name=create_parents,json=createParents,proto3" json:"create_parents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteFileMetadata) Reset() {
	*x = WriteFileMetadata{}
	mi := &file_files_v1_files_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileMetadata) ProtoMessage() {}

func (x *WriteFileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileMetadata.ProtoReflect.Descriptor instead.
func (*WriteFileMetadata) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{8}
}

func (x *WriteFileMetadata) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WriteFileMetadata) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *WriteFileMetadata) GetCreateParents() bool {
	if x != nil {
		return x.CreateParents
	}
	return false
}

// Write file response
type WriteFileResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total number of bytes written
	BytesWritten  int64 `protobuf:"varint,1,opt,name=bytes_written,json=bytesWritten,proto3" json:"bytes_written,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WriteFileResponse) Reset() {
	*x = WriteFileResponse{}
	mi := &file_files_v1_files_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WriteFileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteFileResponse) ProtoMessage() {}

func (x *WriteFileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteFileResponse.ProtoReflect.Descriptor instead.
func (*WriteFileResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{9}
}

func (x *WriteFileResponse) GetBytesWritten() int64 {
	if x != nil {
		return x.BytesWritten
	}
	return 0
}

// Create directory request
type CreateDirectoryRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path of the directory to create
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Directory mode/permissions as Unix mode bits
	Mode uint32 `protobuf:"varint,2,opt,name=mode,proto3" json:"mode,omitempty"`
	// Whether to create parent directories if they don't exist
	CreateParents bool `protobuf:"varint,3,opt,name=create_parents,json=createParents,proto3" json:"create_parents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectoryRequest) Reset() {
	*x = CreateDirectoryRequest{}
	mi := &file_files_v1_files_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryRequest) ProtoMessage() {}

func (x *CreateDirectoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryRequest.ProtoReflect.Descriptor instead.
func (*CreateDirectoryRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{10}
}

func (x *CreateDirectoryRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *CreateDirectoryRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *CreateDirectoryRequest) GetCreateParents() bool {
	if x != nil {
		return x.CreateParents
	}
	return false
}

// Create directory response
type CreateDirectoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateDirectoryResponse) Reset() {
	*x = CreateDirectoryResponse{}
	mi := &file_files_v1_files_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateDirectoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDirectoryResponse) ProtoMessage() {}

func (x *CreateDirectoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDirectoryResponse.ProtoReflect.Descriptor instead.
func (*CreateDirectoryResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{11}
}

// Delete path request
type DeletePathRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to delete
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Whether to delete recursively (for directories)
	Recursive     bool `protobuf:"varint,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePathRequest) Reset() {
	*x = DeletePathRequest{}
	mi := &file_files_v1_files_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePathRequest) ProtoMessage() {}

func (x *DeletePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePathRequest.ProtoReflect.Descriptor instead.
func (*DeletePathRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{12}
}

func (x *DeletePathRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeletePathRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

// Delete path response
type DeletePathResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePathResponse) Reset() {
	*x = DeletePathResponse{}
	mi := &file_files_v1_files_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePathResponse) ProtoMessage() {}

func (x *DeletePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePathResponse.ProtoReflect.Descriptor instead.
func (*DeletePathResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{13}
}

// Move path request
type MovePathRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Source path
	FromPath string `protobuf:"bytes,1,opt,name=from_path,json=fromPath,proto3" json:"from_path,omitempty"`
	// Destination path
	ToPath        string `protobuf:"bytes,2,opt,name=to_path,json=toPath,proto3" json:"to_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovePathRequest) Reset() {
	*x = MovePathRequest{}
	mi := &file_files_v1_files_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovePathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePathRequest) ProtoMessage() {}

func (x *MovePathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePathRequest.ProtoReflect.Descriptor instead.
func (*MovePathRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{14}
}

func (x *MovePathRequest) GetFromPath() string {
	if x != nil {
		return x.FromPath
	}
	return ""
}

func (x *MovePathRequest) GetToPath() string {
	if x != nil {
		return x.ToPath
	}
	return ""
}

// Move path response
type MovePathResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MovePathResponse) Reset() {
	*x = MovePathResponse{}
	mi := &file_files_v1_files_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MovePathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePathResponse) ProtoMessage() {}

func (x *MovePathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePathResponse.ProtoReflect.Descriptor instead.
func (*MovePathResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{15}
}

// Get path info request
type GetPathInfoRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to get information about
	Path          string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPathInfoRequest) Reset() {
	*x = GetPathInfoRequest{}
	mi := &file_files_v1_files_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPathInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathInfoRequest) ProtoMessage() {}

func (x *GetPathInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathInfoRequest.ProtoReflect.Descriptor instead.
func (*GetPathInfoRequest) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{16}
}

func (x *GetPathInfoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

// Get path info response
type GetPathInfoResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// File information
	FileInfo      *FileInfo `protobuf:"bytes,1,opt,name=file_info,json=fileInfo,proto3" json:"file_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPathInfoResponse) Reset() {
	*x = GetPathInfoResponse{}
	mi := &file_files_v1_files_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPathInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathInfoResponse) ProtoMessage() {}

func (x *GetPathInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_files_v1_files_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathInfoResponse.ProtoReflect.Descriptor instead.
func (*GetPathInfoResponse) Descriptor() ([]byte, []int) {
	return file_files_v1_files_proto_rawDescGZIP(), []int{17}
}

func (x *GetPathInfoResponse) GetFileInfo() *FileInfo {
	if x != nil {
		return x.FileInfo
	}
	return nil
}

var File_files_v1_files_proto protoreflect.FileDescriptor

const file_files_v1_files_proto_rawDesc = "" +
	"\n" +
	"\x14files/v1/files.proto\x12\bfiles.v1\x1a\x1fgoogle/protobuf/timestamp.proto\"\xb2\x01\n" +
	"\bFileInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x12\n" +
	"\x04path\x18\x02 \x01(\tR\x04path\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\x12\x12\n" +
	"\x04mode\x18\x04 \x01(\rR\x04mode\x12?\n" +
	"\rmodified_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\fmodifiedTime\x12\x15\n" +
	"\x06is_dir\x18\x06 \x01(\bR\x05isDir\"A\n" +
	"\x0eDirectoryEntry\x12/\n" +
	"\tfile_info\x18\x01 \x01(\v2\x12.files.v1.FileInfoR\bfileInfo\"9\n" +
	"\vStreamChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\"*\n" +
	"\x14ListDirectoryRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"K\n" +
	"\x15ListDirectoryResponse\x122\n" +
	"\aentries\x18\x01 \x03(\v2\x18.files.v1.DirectoryEntryR\aentries\"r\n" +
	"\x0fReadFileRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1b\n" +
	"\x06offset\x18\x02 \x01(\x03H\x00R\x06offset\x88\x01\x01\x12\x19\n" +
	"\x05limit\x18\x03 \x01(\x03H\x01R\x05limit\x88\x01\x01B\t\n" +
	"\a_offsetB\b\n" +
	"\x06_limit\"?\n" +
	"\x10ReadFileResponse\x12+\n" +
	"\x05chunk\x18\x01 \x01(\v2\x15.files.v1.StreamChunkR\x05chunk\"\x84\x01\n" +
	"\x10WriteFileRequest\x129\n" +
	"\bmetadata\x18\x01 \x01(\v2\x1b.files.v1.WriteFileMetadataH\x00R\bmetadata\x12-\n" +
	"\x05chunk\x18\x02 \x01(\v2\x15.files.v1.StreamChunkH\x00R\x05chunkB\x06\n" +
	"\x04data\"b\n" +
	"\x11WriteFileMetadata\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04mode\x18\x02 \x01(\rR\x04mode\x12%\n" +
	"\x0ecreate_parents\x18\x03 \x01(\bR\rcreateParents\"8\n" +
	"\x11WriteFileResponse\x12#\n" +
	"\rbytes_written\x18\x01 \x01(\x03R\fbytesWritten\"g\n" +
	"\x16CreateDirectoryRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x12\n" +
	"\x04mode\x18\x02 \x01(\rR\x04mode\x12%\n" +
	"\x0ecreate_parents\x18\x03 \x01(\bR\rcreateParents\"\x19\n" +
	"\x17CreateDirectoryResponse\"E\n" +
	"\x11DeletePathRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\x12\x1c\n" +
	"\trecursive\x18\x02 \x01(\bR\trecursive\"\x14\n" +
	"\x12DeletePathResponse\"G\n" +
	"\x0fMovePathRequest\x12\x1b\n" +
	"\tfrom_path\x18\x01 \x01(\tR\bfromPath\x12\x17\n" +
	"\ato_path\x18\x02 \x01(\tR\x06toPath\"\x12\n" +
	"\x10MovePathResponse\"(\n" +
	"\x12GetPathInfoRequest\x12\x12\n" +
	"\x04path\x18\x01 \x01(\tR\x04path\"F\n" +
	"\x13GetPathInfoResponse\x12/\n" +
	"\tfile_info\x18\x01 \x01(\v2\x12.files.v1.FileInfoR\bfileInfo2\x9c\x04\n" +
	"\vFileService\x12P\n" +
	"\rListDirectory\x12\x1e.files.v1.ListDirectoryRequest\x1a\x1f.files.v1.ListDirectoryResponse\x12C\n" +
	"\bReadFile\x12\x19.files.v1.ReadFileRequest\x1a\x1a.files.v1.ReadFileResponse0\x01\x12F\n" +
	"\tWriteFile\x12\x1a.files.v1.WriteFileRequest\x1a\x1b.files.v1.WriteFileResponse(\x01\x12V\n" +
	"\x0fCreateDirectory\x12 .files.v1.CreateDirectoryRequest\x1a!.files.v1.CreateDirectoryResponse\x12G\n" +
	"\n" +
	"DeletePath\x12\x1b.files.v1.DeletePathRequest\x1a\x1c.files.v1.DeletePathResponse\x12A\n" +
	"\bMovePath\x12\x19.files.v1.MovePathRequest\x1a\x1a.files.v1.MovePathResponse\x12J\n" +
	"\vGetPathInfo\x12\x1c.files.v1.GetPathInfoRequest\x1a\x1d.files.v1.GetPathInfoResponseB-Z+github.com/cmp0st/byte/gen/files/v1;filesv1b\x06proto3"

var (
	file_files_v1_files_proto_rawDescOnce sync.Once
	file_files_v1_files_proto_rawDescData []byte
)

func file_files_v1_files_proto_rawDescGZIP() []byte {
	file_files_v1_files_proto_rawDescOnce.Do(func() {
		file_files_v1_files_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_files_v1_files_proto_rawDesc), len(file_files_v1_files_proto_rawDesc)))
	})
	return file_files_v1_files_proto_rawDescData
}

var file_files_v1_files_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_files_v1_files_proto_goTypes = []any{
	(*FileInfo)(nil),                // 0: files.v1.FileInfo
	(*DirectoryEntry)(nil),          // 1: files.v1.DirectoryEntry
	(*StreamChunk)(nil),             // 2: files.v1.StreamChunk
	(*ListDirectoryRequest)(nil),    // 3: files.v1.ListDirectoryRequest
	(*ListDirectoryResponse)(nil),   // 4: files.v1.ListDirectoryResponse
	(*ReadFileRequest)(nil),         // 5: files.v1.ReadFileRequest
	(*ReadFileResponse)(nil),        // 6: files.v1.ReadFileResponse
	(*WriteFileRequest)(nil),        // 7: files.v1.WriteFileRequest
	(*WriteFileMetadata)(nil),       // 8: files.v1.WriteFileMetadata
	(*WriteFileResponse)(nil),       // 9: files.v1.WriteFileResponse
	(*CreateDirectoryRequest)(nil),  // 10: files.v1.CreateDirectoryRequest
	(*CreateDirectoryResponse)(nil), // 11: files.v1.CreateDirectoryResponse
	(*DeletePathRequest)(nil),       // 12: files.v1.DeletePathRequest
	(*DeletePathResponse)(nil),      // 13: files.v1.DeletePathResponse
	(*MovePathRequest)(nil),         // 14: files.v1.MovePathRequest
	(*MovePathResponse)(nil),        // 15: files.v1.MovePathResponse
	(*GetPathInfoRequest)(nil),      // 16: files.v1.GetPathInfoRequest
	(*GetPathInfoResponse)(nil),     // 17: files.v1.GetPathInfoResponse
	(*timestamppb.Timestamp)(nil),   // 18: google.protobuf.Timestamp
}
var file_files_v1_files_proto_depIdxs = []int32{
	18, // 0: files.v1.FileInfo.modified_time:type_name -> google.protobuf.Timestamp
	0,  // 1: files.v1.DirectoryEntry.file_info:type_name -> files.v1.FileInfo
	1,  // 2: files.v1.ListDirectoryResponse.entries:type_name -> files.v1.DirectoryEntry
	2,  // 3: files.v1.ReadFileResponse.chunk:type_name -> files.v1.StreamChunk
	8,  // 4: files.v1.WriteFileRequest.metadata:type_name -> files.v1.WriteFileMetadata
	2,  // 5: files.v1.WriteFileRequest.chunk:type_name -> files.v1.StreamChunk
	0,  // 6: files.v1.GetPathInfoResponse.file_info:type_name -> files.v1.FileInfo
	3,  // 7: files.v1.FileService.ListDirectory:input_type -> files.v1.ListDirectoryRequest
	5,  // 8: files.v1.FileService.ReadFile:input_type -> files.v1.ReadFileRequest
	7,  // 9: files.v1.FileService.WriteFile:input_type -> files.v1.WriteFileRequest
	10, // 10: files.v1.FileService.CreateDirectory:input_type -> files.v1.CreateDirectoryRequest
	12, // 11: files.v1.FileService.DeletePath:input_type -> files.v1.DeletePathRequest
	14, // 12: files.v1.FileService.MovePath:input_type -> files.v1.MovePathRequest
	16, // 13: files.v1.FileService.GetPathInfo:input_type -> files.v1.GetPathInfoRequest
	4,  // 14: files.v1.FileService.ListDirectory:output_type -> files.v1.ListDirectoryResponse
	6,  // 15: files.v1.FileService.ReadFile:output_type -> files.v1.ReadFileResponse
	9,  // 16: files.v1.FileService.WriteFile:output_type -> files.v1.WriteFileResponse
	11, // 17: files.v1.FileService.CreateDirectory:output_type -> files.v1.CreateDirectoryResponse
	13, // 18: files.v1.FileService.DeletePath:output_type -> files.v1.DeletePathResponse
	15, // 19: files.v1.FileService.MovePath:output_type -> files.v1.MovePathResponse
	17, // 20: files.v1.FileService.GetPathInfo:output_type -> files.v1.GetPathInfoResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_files_v1_files_proto_init() }
func file_files_v1_files_proto_init() {
	if File_files_v1_files_proto != nil {
		return
	}
	file_files_v1_files_proto_msgTypes[5].OneofWrappers = []any{}
	file_files_v1_files_proto_msgTypes[7].OneofWrappers = []any{
		(*WriteFileRequest_Metadata)(nil),
		(*WriteFileRequest_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_files_v1_files_proto_rawDesc), len(file_files_v1_files_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_files_v1_files_proto_goTypes,
		DependencyIndexes: file_files_v1_files_proto_depIdxs,
		MessageInfos:      file_files_v1_files_proto_msgTypes,
	}.Build()
	File_files_v1_files_proto = out.File
	file_files_v1_files_proto_goTypes = nil
	file_files_v1_files_proto_depIdxs = nil
}
