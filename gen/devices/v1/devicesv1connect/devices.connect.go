// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: devices/v1/devices.proto

package devicesv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/cmp0st/byte/gen/devices/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DeviceServiceName is the fully-qualified name of the DeviceService service.
	DeviceServiceName = "devices.v1.DeviceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DeviceServiceCreateDeviceProcedure is the fully-qualified name of the DeviceService's
	// CreateDevice RPC.
	DeviceServiceCreateDeviceProcedure = "/devices.v1.DeviceService/CreateDevice"
	// DeviceServiceListDevicesProcedure is the fully-qualified name of the DeviceService's ListDevices
	// RPC.
	DeviceServiceListDevicesProcedure = "/devices.v1.DeviceService/ListDevices"
	// DeviceServiceDeleteDeviceProcedure is the fully-qualified name of the DeviceService's
	// DeleteDevice RPC.
	DeviceServiceDeleteDeviceProcedure = "/devices.v1.DeviceService/DeleteDevice"
)

// DeviceServiceClient is a client for the devices.v1.DeviceService service.
type DeviceServiceClient interface {
	CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error)
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
}

// NewDeviceServiceClient constructs a client for the devices.v1.DeviceService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDeviceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DeviceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	deviceServiceMethods := v1.File_devices_v1_devices_proto.Services().ByName("DeviceService").Methods()
	return &deviceServiceClient{
		createDevice: connect.NewClient[v1.CreateDeviceRequest, v1.CreateDeviceResponse](
			httpClient,
			baseURL+DeviceServiceCreateDeviceProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("CreateDevice")),
			connect.WithClientOptions(opts...),
		),
		listDevices: connect.NewClient[v1.ListDevicesRequest, v1.ListDevicesResponse](
			httpClient,
			baseURL+DeviceServiceListDevicesProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("ListDevices")),
			connect.WithClientOptions(opts...),
		),
		deleteDevice: connect.NewClient[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse](
			httpClient,
			baseURL+DeviceServiceDeleteDeviceProcedure,
			connect.WithSchema(deviceServiceMethods.ByName("DeleteDevice")),
			connect.WithClientOptions(opts...),
		),
	}
}

// deviceServiceClient implements DeviceServiceClient.
type deviceServiceClient struct {
	createDevice *connect.Client[v1.CreateDeviceRequest, v1.CreateDeviceResponse]
	listDevices  *connect.Client[v1.ListDevicesRequest, v1.ListDevicesResponse]
	deleteDevice *connect.Client[v1.DeleteDeviceRequest, v1.DeleteDeviceResponse]
}

// CreateDevice calls devices.v1.DeviceService.CreateDevice.
func (c *deviceServiceClient) CreateDevice(ctx context.Context, req *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error) {
	return c.createDevice.CallUnary(ctx, req)
}

// ListDevices calls devices.v1.DeviceService.ListDevices.
func (c *deviceServiceClient) ListDevices(ctx context.Context, req *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return c.listDevices.CallUnary(ctx, req)
}

// DeleteDevice calls devices.v1.DeviceService.DeleteDevice.
func (c *deviceServiceClient) DeleteDevice(ctx context.Context, req *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return c.deleteDevice.CallUnary(ctx, req)
}

// DeviceServiceHandler is an implementation of the devices.v1.DeviceService service.
type DeviceServiceHandler interface {
	CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error)
	ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error)
	DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error)
}

// NewDeviceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDeviceServiceHandler(svc DeviceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	deviceServiceMethods := v1.File_devices_v1_devices_proto.Services().ByName("DeviceService").Methods()
	deviceServiceCreateDeviceHandler := connect.NewUnaryHandler(
		DeviceServiceCreateDeviceProcedure,
		svc.CreateDevice,
		connect.WithSchema(deviceServiceMethods.ByName("CreateDevice")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceListDevicesHandler := connect.NewUnaryHandler(
		DeviceServiceListDevicesProcedure,
		svc.ListDevices,
		connect.WithSchema(deviceServiceMethods.ByName("ListDevices")),
		connect.WithHandlerOptions(opts...),
	)
	deviceServiceDeleteDeviceHandler := connect.NewUnaryHandler(
		DeviceServiceDeleteDeviceProcedure,
		svc.DeleteDevice,
		connect.WithSchema(deviceServiceMethods.ByName("DeleteDevice")),
		connect.WithHandlerOptions(opts...),
	)
	return "/devices.v1.DeviceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DeviceServiceCreateDeviceProcedure:
			deviceServiceCreateDeviceHandler.ServeHTTP(w, r)
		case DeviceServiceListDevicesProcedure:
			deviceServiceListDevicesHandler.ServeHTTP(w, r)
		case DeviceServiceDeleteDeviceProcedure:
			deviceServiceDeleteDeviceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDeviceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDeviceServiceHandler struct{}

func (UnimplementedDeviceServiceHandler) CreateDevice(context.Context, *connect.Request[v1.CreateDeviceRequest]) (*connect.Response[v1.CreateDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devices.v1.DeviceService.CreateDevice is not implemented"))
}

func (UnimplementedDeviceServiceHandler) ListDevices(context.Context, *connect.Request[v1.ListDevicesRequest]) (*connect.Response[v1.ListDevicesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devices.v1.DeviceService.ListDevices is not implemented"))
}

func (UnimplementedDeviceServiceHandler) DeleteDevice(context.Context, *connect.Request[v1.DeleteDeviceRequest]) (*connect.Response[v1.DeleteDeviceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("devices.v1.DeviceService.DeleteDevice is not implemented"))
}
