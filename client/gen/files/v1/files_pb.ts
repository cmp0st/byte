// @generated by protoc-gen-es v1.10.0 with parameter "target=ts,import_extension=none"
// @generated from file files/v1/files.proto (package files.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * File information
 *
 * @generated from message files.v1.FileInfo
 */
export class FileInfo extends Message<FileInfo> {
  /**
   * File or directory name (basename)
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Full path to the file or directory
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * Size of the file in bytes (0 for directories)
   *
   * @generated from field: int64 size = 3;
   */
  size = protoInt64.zero;

  /**
   * File mode/permissions as Unix mode bits
   *
   * @generated from field: uint32 mode = 4;
   */
  mode = 0;

  /**
   * Last modification time
   *
   * @generated from field: google.protobuf.Timestamp modified_time = 5;
   */
  modifiedTime?: Timestamp;

  /**
   * Whether this is a directory
   *
   * @generated from field: bool is_dir = 6;
   */
  isDir = false;

  constructor(data?: PartialMessage<FileInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.FileInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "mode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 5, name: "modified_time", kind: "message", T: Timestamp },
    { no: 6, name: "is_dir", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FileInfo {
    return new FileInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FileInfo {
    return new FileInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FileInfo | PlainMessage<FileInfo> | undefined, b: FileInfo | PlainMessage<FileInfo> | undefined): boolean {
    return proto3.util.equals(FileInfo, a, b);
  }
}

/**
 * Directory entry for listings
 *
 * @generated from message files.v1.DirectoryEntry
 */
export class DirectoryEntry extends Message<DirectoryEntry> {
  /**
   * File information for this entry
   *
   * @generated from field: files.v1.FileInfo file_info = 1;
   */
  fileInfo?: FileInfo;

  constructor(data?: PartialMessage<DirectoryEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.DirectoryEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_info", kind: "message", T: FileInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DirectoryEntry {
    return new DirectoryEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DirectoryEntry {
    return new DirectoryEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DirectoryEntry {
    return new DirectoryEntry().fromJsonString(jsonString, options);
  }

  static equals(a: DirectoryEntry | PlainMessage<DirectoryEntry> | undefined, b: DirectoryEntry | PlainMessage<DirectoryEntry> | undefined): boolean {
    return proto3.util.equals(DirectoryEntry, a, b);
  }
}

/**
 * Streaming chunk for file content
 *
 * @generated from message files.v1.StreamChunk
 */
export class StreamChunk extends Message<StreamChunk> {
  /**
   * Chunk of file data
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  /**
   * Byte offset of this chunk in the file
   *
   * @generated from field: int64 offset = 2;
   */
  offset = protoInt64.zero;

  constructor(data?: PartialMessage<StreamChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.StreamChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StreamChunk {
    return new StreamChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StreamChunk {
    return new StreamChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StreamChunk {
    return new StreamChunk().fromJsonString(jsonString, options);
  }

  static equals(a: StreamChunk | PlainMessage<StreamChunk> | undefined, b: StreamChunk | PlainMessage<StreamChunk> | undefined): boolean {
    return proto3.util.equals(StreamChunk, a, b);
  }
}

/**
 * List directory request
 *
 * @generated from message files.v1.ListDirectoryRequest
 */
export class ListDirectoryRequest extends Message<ListDirectoryRequest> {
  /**
   * Path to the directory to list
   *
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<ListDirectoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.ListDirectoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirectoryRequest {
    return new ListDirectoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirectoryRequest {
    return new ListDirectoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirectoryRequest {
    return new ListDirectoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirectoryRequest | PlainMessage<ListDirectoryRequest> | undefined, b: ListDirectoryRequest | PlainMessage<ListDirectoryRequest> | undefined): boolean {
    return proto3.util.equals(ListDirectoryRequest, a, b);
  }
}

/**
 * List directory response
 *
 * @generated from message files.v1.ListDirectoryResponse
 */
export class ListDirectoryResponse extends Message<ListDirectoryResponse> {
  /**
   * Directory entries
   *
   * @generated from field: repeated files.v1.DirectoryEntry entries = 1;
   */
  entries: DirectoryEntry[] = [];

  constructor(data?: PartialMessage<ListDirectoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.ListDirectoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: DirectoryEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListDirectoryResponse {
    return new ListDirectoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListDirectoryResponse {
    return new ListDirectoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListDirectoryResponse {
    return new ListDirectoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListDirectoryResponse | PlainMessage<ListDirectoryResponse> | undefined, b: ListDirectoryResponse | PlainMessage<ListDirectoryResponse> | undefined): boolean {
    return proto3.util.equals(ListDirectoryResponse, a, b);
  }
}

/**
 * Read file request
 *
 * @generated from message files.v1.ReadFileRequest
 */
export class ReadFileRequest extends Message<ReadFileRequest> {
  /**
   * Path to the file to read
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * Byte offset to start reading from
   *
   * @generated from field: optional int64 offset = 2;
   */
  offset?: bigint;

  /**
   * Maximum number of bytes to read
   *
   * @generated from field: optional int64 limit = 3;
   */
  limit?: bigint;

  constructor(data?: PartialMessage<ReadFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.ReadFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
    { no: 3, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadFileRequest {
    return new ReadFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadFileRequest {
    return new ReadFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadFileRequest {
    return new ReadFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReadFileRequest | PlainMessage<ReadFileRequest> | undefined, b: ReadFileRequest | PlainMessage<ReadFileRequest> | undefined): boolean {
    return proto3.util.equals(ReadFileRequest, a, b);
  }
}

/**
 * Read file response (streamed)
 *
 * @generated from message files.v1.ReadFileResponse
 */
export class ReadFileResponse extends Message<ReadFileResponse> {
  /**
   * File data chunk
   *
   * @generated from field: files.v1.StreamChunk chunk = 1;
   */
  chunk?: StreamChunk;

  constructor(data?: PartialMessage<ReadFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.ReadFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "chunk", kind: "message", T: StreamChunk },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReadFileResponse {
    return new ReadFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReadFileResponse {
    return new ReadFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReadFileResponse {
    return new ReadFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReadFileResponse | PlainMessage<ReadFileResponse> | undefined, b: ReadFileResponse | PlainMessage<ReadFileResponse> | undefined): boolean {
    return proto3.util.equals(ReadFileResponse, a, b);
  }
}

/**
 * Write file request (streamed)
 *
 * @generated from message files.v1.WriteFileRequest
 */
export class WriteFileRequest extends Message<WriteFileRequest> {
  /**
   * Either metadata (first message) or chunk data
   *
   * @generated from oneof files.v1.WriteFileRequest.data
   */
  data: {
    /**
     * File metadata for the write operation
     *
     * @generated from field: files.v1.WriteFileMetadata metadata = 1;
     */
    value: WriteFileMetadata;
    case: "metadata";
  } | {
    /**
     * File data chunk
     *
     * @generated from field: files.v1.StreamChunk chunk = 2;
     */
    value: StreamChunk;
    case: "chunk";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<WriteFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.WriteFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: WriteFileMetadata, oneof: "data" },
    { no: 2, name: "chunk", kind: "message", T: StreamChunk, oneof: "data" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteFileRequest {
    return new WriteFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteFileRequest {
    return new WriteFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteFileRequest {
    return new WriteFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WriteFileRequest | PlainMessage<WriteFileRequest> | undefined, b: WriteFileRequest | PlainMessage<WriteFileRequest> | undefined): boolean {
    return proto3.util.equals(WriteFileRequest, a, b);
  }
}

/**
 * Write file metadata (first message in stream)
 *
 * @generated from message files.v1.WriteFileMetadata
 */
export class WriteFileMetadata extends Message<WriteFileMetadata> {
  /**
   * Path where the file should be written
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * File mode/permissions as Unix mode bits
   *
   * @generated from field: uint32 mode = 2;
   */
  mode = 0;

  /**
   * Whether to create parent directories if they don't exist
   *
   * @generated from field: bool create_parents = 3;
   */
  createParents = false;

  constructor(data?: PartialMessage<WriteFileMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.WriteFileMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "create_parents", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteFileMetadata {
    return new WriteFileMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteFileMetadata {
    return new WriteFileMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteFileMetadata {
    return new WriteFileMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: WriteFileMetadata | PlainMessage<WriteFileMetadata> | undefined, b: WriteFileMetadata | PlainMessage<WriteFileMetadata> | undefined): boolean {
    return proto3.util.equals(WriteFileMetadata, a, b);
  }
}

/**
 * Write file response
 *
 * @generated from message files.v1.WriteFileResponse
 */
export class WriteFileResponse extends Message<WriteFileResponse> {
  /**
   * Total number of bytes written
   *
   * @generated from field: int64 bytes_written = 1;
   */
  bytesWritten = protoInt64.zero;

  constructor(data?: PartialMessage<WriteFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.WriteFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bytes_written", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WriteFileResponse {
    return new WriteFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WriteFileResponse {
    return new WriteFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WriteFileResponse {
    return new WriteFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WriteFileResponse | PlainMessage<WriteFileResponse> | undefined, b: WriteFileResponse | PlainMessage<WriteFileResponse> | undefined): boolean {
    return proto3.util.equals(WriteFileResponse, a, b);
  }
}

/**
 * Create directory request
 *
 * @generated from message files.v1.CreateDirectoryRequest
 */
export class CreateDirectoryRequest extends Message<CreateDirectoryRequest> {
  /**
   * Path of the directory to create
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * Directory mode/permissions as Unix mode bits
   *
   * @generated from field: uint32 mode = 2;
   */
  mode = 0;

  /**
   * Whether to create parent directories if they don't exist
   *
   * @generated from field: bool create_parents = 3;
   */
  createParents = false;

  constructor(data?: PartialMessage<CreateDirectoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.CreateDirectoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mode", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "create_parents", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirectoryRequest {
    return new CreateDirectoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirectoryRequest | PlainMessage<CreateDirectoryRequest> | undefined, b: CreateDirectoryRequest | PlainMessage<CreateDirectoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateDirectoryRequest, a, b);
  }
}

/**
 * Create directory response
 *
 * @generated from message files.v1.CreateDirectoryResponse
 */
export class CreateDirectoryResponse extends Message<CreateDirectoryResponse> {
  constructor(data?: PartialMessage<CreateDirectoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.CreateDirectoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateDirectoryResponse {
    return new CreateDirectoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateDirectoryResponse | PlainMessage<CreateDirectoryResponse> | undefined, b: CreateDirectoryResponse | PlainMessage<CreateDirectoryResponse> | undefined): boolean {
    return proto3.util.equals(CreateDirectoryResponse, a, b);
  }
}

/**
 * Delete path request
 *
 * @generated from message files.v1.DeletePathRequest
 */
export class DeletePathRequest extends Message<DeletePathRequest> {
  /**
   * Path to delete
   *
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * Whether to delete recursively (for directories)
   *
   * @generated from field: bool recursive = 2;
   */
  recursive = false;

  constructor(data?: PartialMessage<DeletePathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.DeletePathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "recursive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePathRequest {
    return new DeletePathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePathRequest {
    return new DeletePathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePathRequest {
    return new DeletePathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePathRequest | PlainMessage<DeletePathRequest> | undefined, b: DeletePathRequest | PlainMessage<DeletePathRequest> | undefined): boolean {
    return proto3.util.equals(DeletePathRequest, a, b);
  }
}

/**
 * Delete path response
 *
 * @generated from message files.v1.DeletePathResponse
 */
export class DeletePathResponse extends Message<DeletePathResponse> {
  constructor(data?: PartialMessage<DeletePathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.DeletePathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeletePathResponse {
    return new DeletePathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeletePathResponse {
    return new DeletePathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeletePathResponse {
    return new DeletePathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeletePathResponse | PlainMessage<DeletePathResponse> | undefined, b: DeletePathResponse | PlainMessage<DeletePathResponse> | undefined): boolean {
    return proto3.util.equals(DeletePathResponse, a, b);
  }
}

/**
 * Move path request
 *
 * @generated from message files.v1.MovePathRequest
 */
export class MovePathRequest extends Message<MovePathRequest> {
  /**
   * Source path
   *
   * @generated from field: string from_path = 1;
   */
  fromPath = "";

  /**
   * Destination path
   *
   * @generated from field: string to_path = 2;
   */
  toPath = "";

  constructor(data?: PartialMessage<MovePathRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.MovePathRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MovePathRequest {
    return new MovePathRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MovePathRequest {
    return new MovePathRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MovePathRequest {
    return new MovePathRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MovePathRequest | PlainMessage<MovePathRequest> | undefined, b: MovePathRequest | PlainMessage<MovePathRequest> | undefined): boolean {
    return proto3.util.equals(MovePathRequest, a, b);
  }
}

/**
 * Move path response
 *
 * @generated from message files.v1.MovePathResponse
 */
export class MovePathResponse extends Message<MovePathResponse> {
  constructor(data?: PartialMessage<MovePathResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.MovePathResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MovePathResponse {
    return new MovePathResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MovePathResponse {
    return new MovePathResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MovePathResponse {
    return new MovePathResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MovePathResponse | PlainMessage<MovePathResponse> | undefined, b: MovePathResponse | PlainMessage<MovePathResponse> | undefined): boolean {
    return proto3.util.equals(MovePathResponse, a, b);
  }
}

/**
 * Get path info request
 *
 * @generated from message files.v1.GetPathInfoRequest
 */
export class GetPathInfoRequest extends Message<GetPathInfoRequest> {
  /**
   * Path to get information about
   *
   * @generated from field: string path = 1;
   */
  path = "";

  constructor(data?: PartialMessage<GetPathInfoRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.GetPathInfoRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPathInfoRequest {
    return new GetPathInfoRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPathInfoRequest {
    return new GetPathInfoRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPathInfoRequest {
    return new GetPathInfoRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetPathInfoRequest | PlainMessage<GetPathInfoRequest> | undefined, b: GetPathInfoRequest | PlainMessage<GetPathInfoRequest> | undefined): boolean {
    return proto3.util.equals(GetPathInfoRequest, a, b);
  }
}

/**
 * Get path info response
 *
 * @generated from message files.v1.GetPathInfoResponse
 */
export class GetPathInfoResponse extends Message<GetPathInfoResponse> {
  /**
   * File information
   *
   * @generated from field: files.v1.FileInfo file_info = 1;
   */
  fileInfo?: FileInfo;

  constructor(data?: PartialMessage<GetPathInfoResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "files.v1.GetPathInfoResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_info", kind: "message", T: FileInfo },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetPathInfoResponse {
    return new GetPathInfoResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetPathInfoResponse {
    return new GetPathInfoResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetPathInfoResponse {
    return new GetPathInfoResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetPathInfoResponse | PlainMessage<GetPathInfoResponse> | undefined, b: GetPathInfoResponse | PlainMessage<GetPathInfoResponse> | undefined): boolean {
    return proto3.util.equals(GetPathInfoResponse, a, b);
  }
}

