// @generated by protoc-gen-connect-es v1.6.1 with parameter "target=ts,import_extension=none"
// @generated from file files/v1/files.proto (package files.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { CreateDirectoryRequest, CreateDirectoryResponse, DeletePathRequest, DeletePathResponse, GetPathInfoRequest, GetPathInfoResponse, ListDirectoryRequest, ListDirectoryResponse, MovePathRequest, MovePathResponse, ReadFileRequest, ReadFileResponse, WriteFileRequest, WriteFileResponse } from "./files_pb";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * FileService provides filesystem operations
 *
 * @generated from service files.v1.FileService
 */
export const FileService = {
  typeName: "files.v1.FileService",
  methods: {
    /**
     * List directory contents
     *
     * @generated from rpc files.v1.FileService.ListDirectory
     */
    listDirectory: {
      name: "ListDirectory",
      I: ListDirectoryRequest,
      O: ListDirectoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Read file content (streaming for large files)
     *
     * @generated from rpc files.v1.FileService.ReadFile
     */
    readFile: {
      name: "ReadFile",
      I: ReadFileRequest,
      O: ReadFileResponse,
      kind: MethodKind.ServerStreaming,
    },
    /**
     * Write file content (streaming for large files)
     *
     * @generated from rpc files.v1.FileService.WriteFile
     */
    writeFile: {
      name: "WriteFile",
      I: WriteFileRequest,
      O: WriteFileResponse,
      kind: MethodKind.ClientStreaming,
    },
    /**
     * Create a directory
     *
     * @generated from rpc files.v1.FileService.CreateDirectory
     */
    createDirectory: {
      name: "CreateDirectory",
      I: CreateDirectoryRequest,
      O: CreateDirectoryResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Delete a file or directory
     *
     * @generated from rpc files.v1.FileService.DeletePath
     */
    deletePath: {
      name: "DeletePath",
      I: DeletePathRequest,
      O: DeletePathResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Move/rename a file or directory
     *
     * @generated from rpc files.v1.FileService.MovePath
     */
    movePath: {
      name: "MovePath",
      I: MovePathRequest,
      O: MovePathResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Get file or directory information
     *
     * @generated from rpc files.v1.FileService.GetPathInfo
     */
    getPathInfo: {
      name: "GetPathInfo",
      I: GetPathInfoRequest,
      O: GetPathInfoResponse,
      kind: MethodKind.Unary,
    },
  }
} as const;

