// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: files/v1/files.proto
//

import Connect
import ConnectMocks
import Foundation
import SwiftProtobuf

/// Mock implementation of `Files_V1_FileServiceClientInterface`.
///
/// Production implementations can be substituted with instances of this
/// class to mock RPC calls. Behavior can be customized
/// either through the properties on this class or by
/// subclassing the mock and overriding its methods.
///
/// Note: This class does not handle thread-safe locking, but provides
/// `@unchecked Sendable` conformance to simplify testing and mocking.
@available(iOS 13, *)
open class Files_V1_FileServiceClientMock: Files_V1_FileServiceClientInterface, @unchecked Sendable {
    /// Mocked for async calls to `listDirectory()`.
    public var mockAsyncListDirectory = { (_: Files_V1_ListDirectoryRequest) -> ResponseMessage<Files_V1_ListDirectoryResponse> in .init(result: .success(.init())) }
    /// Mocked for async calls to `makeDirectory()`.
    public var mockAsyncMakeDirectory = { (_: Files_V1_MakeDirectoryRequest) -> ResponseMessage<Files_V1_MakeDirectoryResponse> in .init(result: .success(.init())) }

    public init() {}

    open func `listDirectory`(request: Files_V1_ListDirectoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Files_V1_ListDirectoryResponse> {
        return self.mockAsyncListDirectory(request)
    }

    open func `makeDirectory`(request: Files_V1_MakeDirectoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Files_V1_MakeDirectoryResponse> {
        return self.mockAsyncMakeDirectory(request)
    }
}
