// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: files/v1/files.proto
//

import Connect
import Foundation
import SwiftProtobuf

/// FileService provides filesystem operations
public protocol Files_V1_FileServiceClientInterface: Sendable {

    /// List directory contents
    @available(iOS 13, *)
    func `listDirectory`(request: Files_V1_ListDirectoryRequest, headers: Connect.Headers) async -> ResponseMessage<Files_V1_ListDirectoryResponse>

    @available(iOS 13, *)
    func `makeDirectory`(request: Files_V1_MakeDirectoryRequest, headers: Connect.Headers) async -> ResponseMessage<Files_V1_MakeDirectoryResponse>
}

/// Concrete implementation of `Files_V1_FileServiceClientInterface`.
public final class Files_V1_FileServiceClient: Files_V1_FileServiceClientInterface, Sendable {
    private let client: Connect.ProtocolClientInterface

    public init(client: Connect.ProtocolClientInterface) {
        self.client = client
    }

    @available(iOS 13, *)
    public func `listDirectory`(request: Files_V1_ListDirectoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Files_V1_ListDirectoryResponse> {
        return await self.client.unary(path: "/files.v1.FileService/ListDirectory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    @available(iOS 13, *)
    public func `makeDirectory`(request: Files_V1_MakeDirectoryRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Files_V1_MakeDirectoryResponse> {
        return await self.client.unary(path: "/files.v1.FileService/MakeDirectory", idempotencyLevel: .unknown, request: request, headers: headers)
    }

    public enum Metadata {
        public enum Methods {
            public static let listDirectory = Connect.MethodSpec(name: "ListDirectory", service: "files.v1.FileService", type: .unary)
            public static let makeDirectory = Connect.MethodSpec(name: "MakeDirectory", service: "files.v1.FileService", type: .unary)
        }
    }
}
