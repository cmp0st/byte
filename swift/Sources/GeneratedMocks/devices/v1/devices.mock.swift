// Code generated by protoc-gen-connect-swift. DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Source: devices/v1/devices.proto
//

import Connect
import ConnectMocks
import Foundation
import SwiftProtobuf

/// Mock implementation of `Devices_V1_DeviceServiceClientInterface`.
///
/// Production implementations can be substituted with instances of this
/// class to mock RPC calls. Behavior can be customized
/// either through the properties on this class or by
/// subclassing the mock and overriding its methods.
///
/// Note: This class does not handle thread-safe locking, but provides
/// `@unchecked Sendable` conformance to simplify testing and mocking.
@available(iOS 13, *)
open class Devices_V1_DeviceServiceClientMock: Devices_V1_DeviceServiceClientInterface, @unchecked Sendable {
    /// Mocked for async calls to `createDevice()`.
    public var mockAsyncCreateDevice = { (_: Devices_V1_CreateDeviceRequest) -> ResponseMessage<Devices_V1_CreateDeviceResponse> in .init(result: .success(.init())) }
    /// Mocked for async calls to `listDevices()`.
    public var mockAsyncListDevices = { (_: Devices_V1_ListDevicesRequest) -> ResponseMessage<Devices_V1_ListDevicesResponse> in .init(result: .success(.init())) }
    /// Mocked for async calls to `deleteDevice()`.
    public var mockAsyncDeleteDevice = { (_: Devices_V1_DeleteDeviceRequest) -> ResponseMessage<Devices_V1_DeleteDeviceResponse> in .init(result: .success(.init())) }

    public init() {}

    open func `createDevice`(request: Devices_V1_CreateDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Devices_V1_CreateDeviceResponse> {
        return self.mockAsyncCreateDevice(request)
    }

    open func `listDevices`(request: Devices_V1_ListDevicesRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Devices_V1_ListDevicesResponse> {
        return self.mockAsyncListDevices(request)
    }

    open func `deleteDevice`(request: Devices_V1_DeleteDeviceRequest, headers: Connect.Headers = [:]) async -> ResponseMessage<Devices_V1_DeleteDeviceResponse> {
        return self.mockAsyncDeleteDevice(request)
    }
}
